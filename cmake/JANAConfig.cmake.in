@PACKAGE_INIT@

find_package(Threads REQUIRED)

include("${CMAKE_CURRENT_LIST_DIR}/JANATargets.cmake")

# Expose public dependencies
include(CMakeFindDependencyMacro)
set(USE_PODIO @USE_PODIO@)
if(USE_PODIO)
    find_dependency(podio REQUIRED)
endif()
set(USE_ROOT @USE_ROOT@)
if(USE_ROOT)
    find_dependency(ROOT REQUIRED)
endif()
set(USE_ZEROMQ @USE_ZEROMQ@)
if(USE_ZEROMQ)
    find_dependency(ZeroMQ REQUIRED)
endif()

# Provide user with shared libraries by default if JANA was built with them. 
# Otherwise, provide them with the static version. They can always specify themselves
# using the JANA::jana2_shared_lib and JANA::jana2_static_lib targets explicitly.
# n.b. this would be cleaner if we could use an ALIAS, but that would require cmake
# 3.18 or greater and we want to support legacy versions at this point.
set(BUILD_SHARED_LIBS @BUILD_SHARED_LIBS@)
if (${BUILD_SHARED_LIBS})
    get_target_property(JANA_INCLUDE_DIRS JANA::jana2_shared_lib INTERFACE_INCLUDE_DIRECTORIES)
    set(JANA_LIBRARIES JANA::jana2_shared_lib)
else()
    get_target_property(JANA_INCLUDE_DIRS JANA::jana2_static_lib INTERFACE_INCLUDE_DIRECTORIES)
    set(JANA_LIBRARIES JANA::jana2_static_lib)
endif()

# There are some issues with the include directories being passed through as a property
# of the imported targets. This shows up as JANA_INCLUDE_DIRS being set to
# "JANA_INCLUDE_DIRS-NOTFOUND". As a workaround, if "NOTFOUND" is included in
# JANA_INCLUDE_DIRS then overwrite it here with what it should have been set to.
if(${JANA_INCLUDE_DIRS} MATCHES "NOTFOUND")
    set(JANA_INCLUDE_DIRS @CMAKE_INSTALL_PREFIX@/include)
endif()

# Backwards compatibility
set(JANA_INCLUDE_DIR ${JANA_INCLUDE_DIRS})
set(JANA_LIBRARY ${JANA_LIBRARIES}) 
set(JANA_LIB ${JANA_LIBRARIES}) 

# Include JANA cmake helper macros
include("${CMAKE_CURRENT_LIST_DIR}/AddJanaPlugin.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/AddJanaLibrary.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/AddJanaTest.cmake")


