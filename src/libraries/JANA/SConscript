

import sbms

Import('env')
env = env.Clone()

sbms.AddJANA(env)

env.PrependUnique(CPPPATH = '.')      # find relative includes
env.PrependUnique(CPPPATH = '..')     # find absolute includes prefixed by lib name, e.g. #include <JANA/JObject.h>

env.AppendUnique(ALL_SOURCES = env.Glob('*.cc'))
env.AppendUnique(ALL_SOURCES = env.Glob('Engine/*.cc'))
env.AppendUnique(ALL_SOURCES = env.Glob('Services/*.cc'))
env.AppendUnique(ALL_SOURCES = env.Glob('Status/*.cc'))
env.AppendUnique(ALL_SOURCES = env.Glob('Utils/*.cc'))
env.AppendUnique(ALL_SOURCES = env.Glob('Calibrations/*.cc'))
env.AppendUnique(ALL_SOURCES = env.Glob('CLI/*.cc'))

libname = 'JANA'
myobjs = env.Object(env['ALL_SOURCES'])

mylib = env.Library(target=libname, source=myobjs)

# Cleaning and installation are restricted to the directory
# scons was launched from or its descendents
CurrentDir = env.Dir('.').srcnode().abspath
if not CurrentDir.startswith(env.GetLaunchDir()):
    # Not in launch directory. Tell scons not to clean these targets
    env.NoClean([myobjs, mylib])
else:
    # We're in launch directory (or descendent) schedule installation

    # Installation directories for library and headers
    installdir = env.subst('$INSTALLDIR')
    includedir = "%s/%s" %(env.subst('$INCDIR'), libname)
    libdir = env.subst('$LIBDIR')

    # Install targets
    env.Install(libdir, mylib)

    env.Install(includedir, env.Glob('*.h'))
    env.Install(includedir + "/Engine", env.Glob('Engine/*.h'))
    env.Install(includedir + "/Services", env.Glob('Services/*.h'))
    env.Install(includedir + "/Status", env.Glob('Status/*.h'))
    env.Install(includedir + "/Utils", env.Glob('Utils/*.h'))
    env.Install(includedir + "/Calibrations", env.Glob('Calibrations/*.h'))
    env.Install(includedir + "/CLI", env.Glob('CLI/*.h'))
